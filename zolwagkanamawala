using System;
using System.Security.Cryptography;
using System.Text;
using System.Web.UI;
using MySql.Data.MySqlClient;

namespace WebApplication1
{
    public partial class createacc : Page
    {
        // Define your MySQL connection string
        string connectionString = "server=localhost;database=WEC;uid=root;pwd=";

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                PopulateBarangays();
            }
        }

        // Populate dropdown list with barangays
        private void PopulateBarangays()
        {
            string query = "SELECT wec FROM addresses";
            using (MySqlConnection connection = new MySqlConnection(connectionString))
            {
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    connection.Open();
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            barangayDropDown.Items.Add(reader.GetString(0));
                        }
                    }
                }
            }
        }

        // Event handler for submit button click
        protected void Button1_Click(object sender, EventArgs e)
        {
            string username = usernametxt.Text;
            string phoneNumber = phoneno.Text; // Get phone number from the input field
            string password = pwtxt.Text;
            string address = barangaytxt.Text; // Get selected address from the input field

            // Check if reCAPTCHA is successfully verified
            if (!IsCaptchaVerified())
            {
                // Display error message if reCAPTCHA verification fails
                successLabel.Text = "Please verify reCAPTCHA!";
                successLabel.ForeColor = System.Drawing.Color.Red;
                successLabel.Visible = true;
                return;
            }

            // Check password strength
            suggestStrongPassword();

            // If password does not meet expectations, return without inserting data
            if (passwordRequirementLabel.Visible)
            {
                return;
            }

            InsertUser(username, phoneNumber, address, password);

            ClearTextBoxes();
        }

        // Function to check if reCAPTCHA is successfully verified
        private bool IsCaptchaVerified()
        {
            string captchaResponse = Request.Form["g-recaptcha-response"];
            if (string.IsNullOrEmpty(captchaResponse))
            {
                return false;
            }

            // Validate reCAPTCHA response using Google's API
            string secretKey = "6Lei1MIpAAAAAJLNM6n4IcEhhPT3bQoEF0yp7bLe"; // Your reCAPTCHA secret key
            string apiUrl = $"https://www.google.com/recaptcha/api/siteverify?secret={secretKey}&response={captchaResponse}";
            using (var wc = new System.Net.WebClient())
            {
                var json = wc.DownloadString(apiUrl);
                dynamic result = Newtonsoft.Json.JsonConvert.DeserializeObject(json);
                return result.success;
            }
        }

        // This method inserts the username, password, phone number, and address into your database
        private void InsertUser(string username, string phoneNumber, string address, string password)
        {
            // Check if username already exists
            if (UsernameExists(username))
            {
                // Show error message if username already exists
                successLabel.Text = "Account already exists!";
                successLabel.ForeColor = System.Drawing.Color.Red;
                successLabel.Visible = true;
                return; // Exit method
            }

            // Hash the password before storing it
            string hashedPassword = HashPassword(password);

            // SQL query to insert username, hashed password, phone number, and address into your login table
            string query = "INSERT INTO login (username, password, phoneno, address) VALUES (@username, @password, @phoneno, @address)";

            using (MySqlConnection connection = new MySqlConnection(connectionString))
            {
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@username", username);
                    command.Parameters.AddWithValue("@phoneno", phoneNumber);
                    command.Parameters.AddWithValue("@address", address);
                    command.Parameters.AddWithValue("@password", hashedPassword);

                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }

            // Show success message
            successLabel.Text = "You Finally Created your account!";
            successLabel.ForeColor = System.Drawing.Color.Green;
            successLabel.Visible = true;

            // Redirect user to the next form after a short delay (if needed)
            Response.AddHeader("REFRESH", "2;URL=WebForm1.aspx"); // Redirect after 2 seconds, change "WebForm1.aspx" to the actual URL of the next form
        }

        // Hash the password using SHA256
        private string HashPassword(string password)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));

                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        // This method checks if the username already exists in the database
        private bool UsernameExists(string username)
        {
            string query = "SELECT COUNT(*) FROM login WHERE username = @username";

            using (MySqlConnection connection = new MySqlConnection(connectionString))
            {
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@username", username);

                    connection.Open();
                    int count = Convert.ToInt32(command.ExecuteScalar());

                    return count > 0;
                }
            }
        }

        // Event handler for clear button click
        protected void Button1_Click1(object sender, EventArgs e)
        {
            ClearTextBoxes();
        }

        // Clear all textboxes
        private void ClearTextBoxes()
        {
            usernametxt.Text = "";
            pwtxt.Text = "";
            phoneno.Text = "";
            barangaytxt.Text = "";
        }

        // Function to suggest a strong password
        private void suggestStrongPassword()
        {
            // Check if the password contains at least one uppercase letter, one lowercase letter, one number, and one special character
            string password = pwtxt.Text;
            var uppercaseRegex = new System.Text.RegularExpressions.Regex("[A-Z]");
            var lowercaseRegex = new System.Text.RegularExpressions.Regex("[a-z]");
            var numberRegex = new System.Text.RegularExpressions.Regex("[0-9]");
            var specialCharacterRegex = new System.Text.RegularExpressions.Regex("[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+");

            var isValid = true;
            if (!uppercaseRegex.IsMatch(password) || !lowercaseRegex.IsMatch(password) || !numberRegex.IsMatch(password) || !specialCharacterRegex.IsMatch(password))
            {
                isValid = false;
            }

            if (!isValid)
            {
                // Display password requirement label
                passwordRequirementLabel.Text = "Password must include at least one uppercase letter, one lowercase letter, one number, and one special character!";
                passwordRequirementLabel.Visible = true;
            }
            else
            {
                // Hide password requirement label
                passwordRequirementLabel.Visible = false;
            }
        }

        // Event handler for cancel button click
        protected void Button2_Click(object sender, EventArgs e)
        {
            string script = "window.close();";
            ClientScript.RegisterStartupScript(this.GetType(), "closeWindow", script, true);
        }
    }
}
